{"version":3,"sources":["components/mockTodoData.js","components/todoComponent.jsx","components/addNewTask.jsx","components/taskManager.jsx","App.js","serviceWorker.js","index.js"],"names":["todoData","_id","text","completed","ToDoComponent","items","onCheck","length","className","map","item","key","style","marginBottom","backgroundColor","borderColor","borderRadius","borderWidth","marginRight","top","left","type","onClick","defaultChecked","AddNewTask","onSubmit","useState","taskTitle","setTaskTitle","localOnSubmit","e","title","placeholder","value","onChange","event","target","required","TaskManager","state","tasks","handleCheck","filteredTask","filter","task","index","indexOf","setState","handleSubmit","preventDefault","newTask","Date","now","toString","createData","push","console","log","handleChange","updated","name","data","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cbe9aebf.chunk.js","sourcesContent":["const todoData = [\n  { _id: 1, text: \"take out trash\", completed: false },\n  { _id: 2, text: \"take out dog\", completed: true },\n  { _id: 3, text: \"give food to the dog\", completed: false },\n  { _id: 4, text: \"the homework!!\", completed: false },\n  { _id: 5, text: \"give food to the cat\", completed: true },\n  { _id: 6, text: \"study coding\", completed: true }\n];\n\nexport function getData() {\n  return todoData;\n}\nexport function createData(text) {\n  const newData = { _id: Date.now().toString(), text, completed: false };\n  return newData;\n}\n\nexport default todoData;\n","import React from \"react\";\n\nconst ToDoComponent = ({ items, onCheck }) => {\n  return items.length !== 0 ? (\n    <ul className=\"list-group\">\n      {items.map(item => (\n        <li\n          className=\"list-group-item\"\n          key={item._id}\n          style={{\n            marginBottom: \"3px\",\n            backgroundColor: \"#ddd\",\n            borderColor: \"#bcc\",\n            borderRadius: \"15px\",\n            borderWidth: \"3px\",\n            marginRight: \"5px\"\n          }}\n        >\n          <input\n            style={{\n              marginRight: \"5px\",\n              top: 0,\n              left: 0\n            }}\n            type=\"checkbox\"\n            onClick={() => onCheck(item._id)}\n            defaultChecked={item.completed}\n          />\n          {item.text}\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <h3>Nothing in here...</h3>\n  );\n};\n\nexport default ToDoComponent;\n","import React, { useState } from \"react\";\n\nconst AddNewTask = ({ onSubmit }) => {\n  const [taskTitle, setTaskTitle] = useState(\"\");\n\n  const handleInput = value => {\n    setTaskTitle(value);\n  };\n\n  const localOnSubmit = e => {\n    const title = taskTitle;\n    setTaskTitle(\"\");\n    onSubmit(e, title);\n  };\n\n  return (\n    <form onSubmit={e => localOnSubmit(e)}>\n      <h2>Got something new? ^-^ </h2>\n      <input\n        style={{\n          backgroundColor: \"#ddd\",\n          borderColor: \"#bcc\",\n          borderRadius: \"15px\",\n          borderWidth: \"2px\",\n          marginBottom: \"30px\",\n          marginRight: \"5px\"\n        }}\n        type=\"text\"\n        placeholder=\" insert todo...\"\n        value={taskTitle}\n        onChange={event => handleInput(event.target.value)}\n        required\n      />\n      <input\n        style={{\n          borderWidth: \"2px\",\n          backgroundColor: \"#ddd\",\n          borderRadius: \"15px\",\n          borderColor: \"gray\"\n        }}\n        type=\"submit\"\n      />\n    </form>\n  );\n};\n\nexport default AddNewTask;\n","import React, { Component } from \"react\";\nimport { getData, createData } from \"./mockTodoData\";\nimport ToDoComponent from \"./todoComponent\";\nimport AddNewTask from \"./addNewTask\";\n\nclass TaskManager extends Component {\n  state = { tasks: [] };\n\n  componentDidMount() {\n    const data = getData();\n    this.setState({ tasks: data });\n  }\n\n  handleCheck = _id => {\n    const tasks = [...this.state.tasks];\n    const filteredTask = tasks.filter(task => task._id === _id);\n    const index = tasks.indexOf(filteredTask[0]);\n    tasks[index] = { ...tasks[index] };\n    tasks[index].completed = !tasks[index].completed;\n    this.setState({ tasks });\n  };\n\n  handleSubmit = (e, text) => {\n    const { tasks } = { ...this.state };\n    e.preventDefault();\n    const newTask = createData(text);\n    tasks.push(newTask);\n    console.log(newTask);\n    this.setState({ tasks });\n  };\n\n  handleChange = e => {\n    const { tasks } = { ...this.state };\n    const updated = tasks;\n    const { name, value } = e.target;\n    updated[name] = value;\n    this.setState({ tasks: updated });\n  };\n\n  render() {\n    return (\n      <div className=\"d-flex flex-column justify-content-start\">\n        <div className=\"p-2 bd-highlight\">\n          <AddNewTask onSubmit={this.handleSubmit} />\n        </div>\n        <div className=\"p-2 bd-highlight \">\n          <h2>To Do</h2>\n          <ToDoComponent\n            items={this.state.tasks.filter(task => task.completed === false)}\n            onCheck={this.handleCheck}\n          />\n        </div>\n        <br />\n        <div className=\"p-2 bd-highlight\">\n          <h2>Done</h2>\n          <ToDoComponent\n            items={this.state.tasks.filter(task => task.completed === true)}\n            onCheck={this.handleCheck}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TaskManager;\n","import React from \"react\";\nimport \"./App.css\";\nimport TaskManager from \"./components/taskManager\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>A To Do List with Hooks</h1>\n      <TaskManager />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}